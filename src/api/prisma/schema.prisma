generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  username          String             @unique
  email             String             @unique
  emailVerification EmailVerification?
  isEmailVerified   Boolean            @default(false)
  password          String
  profile           Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId         Int                @unique
  posts             Post[]
  comments          Comment[]
  reactions         Reaction[]
  followedBy        Follows[]          @relation("following")
  following         Follows[]          @relation("follower")
}

model EmailVerification {
  token     String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
}

model Profile {
  id            Int      @id @default(autoincrement())
  user          User?
  firstName     String
  lastName      String
  description   String?
  brithDate     DateTime
  profilePicUrl String?
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  content   String?
  media     Media[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model Reaction {
  createdAt DateTime     @updatedAt
  type      ReactionType
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@id([authorId, postId])
}

model Media {
  id       String    @id @default(uuid())
  mediaUrl String
  type     MediaType
  Post     Post      @relation(fields: [postId], references: [id])
  postId   String    @unique
}

enum ReactionType {
  LIKE
  LOVE
  CARE
  HAHA
  WOW
  SAD
  ANGRY
}

enum MediaType {
  IMAGE
  VIDEO
}
